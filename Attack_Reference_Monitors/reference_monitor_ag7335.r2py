TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    list = filename.split('.')
    if(list[0].isalnum() and list[0].islower() and list[1] == 'txt'):
      mycontext['debug'] = False
      self.Afn = filename+'.a'
      self.Bfn = filename+'.b'

      if create:
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        if(not file_status(self.Afile)): 
          self.Afile.writeat('SE',0)
      else:
        self.Afile = openfile(self.Afn,False)
        self.Bfile = openfile(self.Bfn,False)
    self.Afile.filelock = createlock()
    self.Bfile.filelock = createlock()


  def writeat(self,data,offset):
    self.Bfile.filelock.acquire(True)
    self.Bfile.writeat(data,offset) 
    self.Bfile.filelock.release()    

  def readat(self,bytes,offset):
      self.Afile.filelock.acquire(True)
      data = self.Afile.readat(bytes,offset)
      self.Afile.filelock.release()
      return data

  def close(self):
    self.Bfile.filelock.acquire(True)
    self.Afile.filelock.acquire(True)
    if(file_status(self.Afile) and file_status(self.Bfile)):
       copy1 = self.Bfile.readat(None,0)
       self.Afile.writeat(copy1,0)

    else:
       copy2 = self.Afile.readat(None,0)
       self.Bfile.writeat(copy2,0)
    self.Afile.close()
    self.Bfile.close()
    self.Afile.filelock.release()
    self.Bfile.filelock.release()

def ABopenfile(filename, create):
  return ABFile(filename,create)

def file_status(file):
 m = file.readat(1,0)
 if (m == 'S'):
  i = 0
  try:
   while(True):
    a = file.readat(1,i)
    i = i + 1
  except SeekPastEndOfFileError:
   n = file.readat(1,i-2)
  if ( n == 'E'):
   return True
  else:
   return False

sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

secure_dispatch_module()